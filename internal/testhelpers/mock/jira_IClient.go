// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mock

import (
	"github.com/smartcontractkit/branch-out/jira"
	mock "github.com/stretchr/testify/mock"
)

// NewJiraIClient creates a new instance of JiraIClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewJiraIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *JiraIClient {
	mock := &JiraIClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// JiraIClient is an autogenerated mock type for the IClient type
type JiraIClient struct {
	mock.Mock
}

type JiraIClient_Expecter struct {
	mock *mock.Mock
}

func (_m *JiraIClient) EXPECT() *JiraIClient_Expecter {
	return &JiraIClient_Expecter{mock: &_m.Mock}
}

// AddCommentToTicket provides a mock function for the type JiraIClient
func (_mock *JiraIClient) AddCommentToTicket(ticketKey string, comment string) error {
	ret := _mock.Called(ticketKey, comment)

	if len(ret) == 0 {
		panic("no return value specified for AddCommentToTicket")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = returnFunc(ticketKey, comment)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// JiraIClient_AddCommentToTicket_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddCommentToTicket'
type JiraIClient_AddCommentToTicket_Call struct {
	*mock.Call
}

// AddCommentToTicket is a helper method to define mock.On call
//   - ticketKey string
//   - comment string
func (_e *JiraIClient_Expecter) AddCommentToTicket(ticketKey interface{}, comment interface{}) *JiraIClient_AddCommentToTicket_Call {
	return &JiraIClient_AddCommentToTicket_Call{Call: _e.mock.On("AddCommentToTicket", ticketKey, comment)}
}

func (_c *JiraIClient_AddCommentToTicket_Call) Run(run func(ticketKey string, comment string)) *JiraIClient_AddCommentToTicket_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *JiraIClient_AddCommentToTicket_Call) Return(err error) *JiraIClient_AddCommentToTicket_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *JiraIClient_AddCommentToTicket_Call) RunAndReturn(run func(ticketKey string, comment string) error) *JiraIClient_AddCommentToTicket_Call {
	_c.Call.Return(run)
	return _c
}

// CreateFlakyTestTicket provides a mock function for the type JiraIClient
func (_mock *JiraIClient) CreateFlakyTestTicket(req jira.FlakyTestTicketRequest) (*jira.TicketResponse, error) {
	ret := _mock.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for CreateFlakyTestTicket")
	}

	var r0 *jira.TicketResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(jira.FlakyTestTicketRequest) (*jira.TicketResponse, error)); ok {
		return returnFunc(req)
	}
	if returnFunc, ok := ret.Get(0).(func(jira.FlakyTestTicketRequest) *jira.TicketResponse); ok {
		r0 = returnFunc(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*jira.TicketResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(jira.FlakyTestTicketRequest) error); ok {
		r1 = returnFunc(req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// JiraIClient_CreateFlakyTestTicket_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateFlakyTestTicket'
type JiraIClient_CreateFlakyTestTicket_Call struct {
	*mock.Call
}

// CreateFlakyTestTicket is a helper method to define mock.On call
//   - req jira.FlakyTestTicketRequest
func (_e *JiraIClient_Expecter) CreateFlakyTestTicket(req interface{}) *JiraIClient_CreateFlakyTestTicket_Call {
	return &JiraIClient_CreateFlakyTestTicket_Call{Call: _e.mock.On("CreateFlakyTestTicket", req)}
}

func (_c *JiraIClient_CreateFlakyTestTicket_Call) Run(run func(req jira.FlakyTestTicketRequest)) *JiraIClient_CreateFlakyTestTicket_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 jira.FlakyTestTicketRequest
		if args[0] != nil {
			arg0 = args[0].(jira.FlakyTestTicketRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *JiraIClient_CreateFlakyTestTicket_Call) Return(ticketResponse *jira.TicketResponse, err error) *JiraIClient_CreateFlakyTestTicket_Call {
	_c.Call.Return(ticketResponse, err)
	return _c
}

func (_c *JiraIClient_CreateFlakyTestTicket_Call) RunAndReturn(run func(req jira.FlakyTestTicketRequest) (*jira.TicketResponse, error)) *JiraIClient_CreateFlakyTestTicket_Call {
	_c.Call.Return(run)
	return _c
}

// GetTicketStatus provides a mock function for the type JiraIClient
func (_mock *JiraIClient) GetTicketStatus(ticketKey string) (*jira.TicketStatus, error) {
	ret := _mock.Called(ticketKey)

	if len(ret) == 0 {
		panic("no return value specified for GetTicketStatus")
	}

	var r0 *jira.TicketStatus
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*jira.TicketStatus, error)); ok {
		return returnFunc(ticketKey)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *jira.TicketStatus); ok {
		r0 = returnFunc(ticketKey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*jira.TicketStatus)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(ticketKey)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// JiraIClient_GetTicketStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTicketStatus'
type JiraIClient_GetTicketStatus_Call struct {
	*mock.Call
}

// GetTicketStatus is a helper method to define mock.On call
//   - ticketKey string
func (_e *JiraIClient_Expecter) GetTicketStatus(ticketKey interface{}) *JiraIClient_GetTicketStatus_Call {
	return &JiraIClient_GetTicketStatus_Call{Call: _e.mock.On("GetTicketStatus", ticketKey)}
}

func (_c *JiraIClient_GetTicketStatus_Call) Run(run func(ticketKey string)) *JiraIClient_GetTicketStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *JiraIClient_GetTicketStatus_Call) Return(ticketStatus *jira.TicketStatus, err error) *JiraIClient_GetTicketStatus_Call {
	_c.Call.Return(ticketStatus, err)
	return _c
}

func (_c *JiraIClient_GetTicketStatus_Call) RunAndReturn(run func(ticketKey string) (*jira.TicketStatus, error)) *JiraIClient_GetTicketStatus_Call {
	_c.Call.Return(run)
	return _c
}
