// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mock

import (
	"github.com/andygrunwald/go-jira"
	"github.com/smartcontractkit/branch-out/trunk"
	mock "github.com/stretchr/testify/mock"
)

// NewTrunkIClient creates a new instance of TrunkIClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTrunkIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *TrunkIClient {
	mock := &TrunkIClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// TrunkIClient is an autogenerated mock type for the IClient type
type TrunkIClient struct {
	mock.Mock
}

type TrunkIClient_Expecter struct {
	mock *mock.Mock
}

func (_m *TrunkIClient) EXPECT() *TrunkIClient_Expecter {
	return &TrunkIClient_Expecter{mock: &_m.Mock}
}

// LinkTicketToTestCase provides a mock function for the type TrunkIClient
func (_mock *TrunkIClient) LinkTicketToTestCase(testCaseID string, ticket *jira.Issue, repoURL string) error {
	ret := _mock.Called(testCaseID, ticket, repoURL)

	if len(ret) == 0 {
		panic("no return value specified for LinkTicketToTestCase")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, *jira.Issue, string) error); ok {
		r0 = returnFunc(testCaseID, ticket, repoURL)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// TrunkIClient_LinkTicketToTestCase_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LinkTicketToTestCase'
type TrunkIClient_LinkTicketToTestCase_Call struct {
	*mock.Call
}

// LinkTicketToTestCase is a helper method to define mock.On call
//   - testCaseID string
//   - ticket *jira.Issue
//   - repoURL string
func (_e *TrunkIClient_Expecter) LinkTicketToTestCase(testCaseID interface{}, ticket interface{}, repoURL interface{}) *TrunkIClient_LinkTicketToTestCase_Call {
	return &TrunkIClient_LinkTicketToTestCase_Call{Call: _e.mock.On("LinkTicketToTestCase", testCaseID, ticket, repoURL)}
}

func (_c *TrunkIClient_LinkTicketToTestCase_Call) Run(run func(testCaseID string, ticket *jira.Issue, repoURL string)) *TrunkIClient_LinkTicketToTestCase_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 *jira.Issue
		if args[1] != nil {
			arg1 = args[1].(*jira.Issue)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *TrunkIClient_LinkTicketToTestCase_Call) Return(err error) *TrunkIClient_LinkTicketToTestCase_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *TrunkIClient_LinkTicketToTestCase_Call) RunAndReturn(run func(testCaseID string, ticket *jira.Issue, repoURL string) error) *TrunkIClient_LinkTicketToTestCase_Call {
	_c.Call.Return(run)
	return _c
}

// QuarantinedTests provides a mock function for the type TrunkIClient
func (_mock *TrunkIClient) QuarantinedTests(repoURL string, orgURLSlug string) ([]trunk.TestCase, error) {
	ret := _mock.Called(repoURL, orgURLSlug)

	if len(ret) == 0 {
		panic("no return value specified for QuarantinedTests")
	}

	var r0 []trunk.TestCase
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string) ([]trunk.TestCase, error)); ok {
		return returnFunc(repoURL, orgURLSlug)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string) []trunk.TestCase); ok {
		r0 = returnFunc(repoURL, orgURLSlug)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]trunk.TestCase)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = returnFunc(repoURL, orgURLSlug)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// TrunkIClient_QuarantinedTests_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QuarantinedTests'
type TrunkIClient_QuarantinedTests_Call struct {
	*mock.Call
}

// QuarantinedTests is a helper method to define mock.On call
//   - repoURL string
//   - orgURLSlug string
func (_e *TrunkIClient_Expecter) QuarantinedTests(repoURL interface{}, orgURLSlug interface{}) *TrunkIClient_QuarantinedTests_Call {
	return &TrunkIClient_QuarantinedTests_Call{Call: _e.mock.On("QuarantinedTests", repoURL, orgURLSlug)}
}

func (_c *TrunkIClient_QuarantinedTests_Call) Run(run func(repoURL string, orgURLSlug string)) *TrunkIClient_QuarantinedTests_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *TrunkIClient_QuarantinedTests_Call) Return(testCases []trunk.TestCase, err error) *TrunkIClient_QuarantinedTests_Call {
	_c.Call.Return(testCases, err)
	return _c
}

func (_c *TrunkIClient_QuarantinedTests_Call) RunAndReturn(run func(repoURL string, orgURLSlug string) ([]trunk.TestCase, error)) *TrunkIClient_QuarantinedTests_Call {
	_c.Call.Return(run)
	return _c
}
