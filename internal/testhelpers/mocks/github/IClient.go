// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package github

import (
	"context"

	"github.com/rs/zerolog"
	"github.com/smartcontractkit/branch-out/github"
	"github.com/smartcontractkit/branch-out/golang"
	mock "github.com/stretchr/testify/mock"
)

// NewMockIClient creates a new instance of MockIClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIClient {
	mock := &MockIClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockIClient is an autogenerated mock type for the IClient type
type MockIClient struct {
	mock.Mock
}

type MockIClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIClient) EXPECT() *MockIClient_Expecter {
	return &MockIClient_Expecter{mock: &_m.Mock}
}

// QuarantineTests provides a mock function for the type MockIClient
func (_mock *MockIClient) QuarantineTests(ctx context.Context, l zerolog.Logger, owner string, repo string, targets []golang.QuarantineTarget, options ...github.QuarantineOption) error {
	var tmpRet mock.Arguments
	if len(options) > 0 {
		tmpRet = _mock.Called(ctx, l, owner, repo, targets, options)
	} else {
		tmpRet = _mock.Called(ctx, l, owner, repo, targets)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for QuarantineTests")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, zerolog.Logger, string, string, []golang.QuarantineTarget, ...github.QuarantineOption) error); ok {
		r0 = returnFunc(ctx, l, owner, repo, targets, options...)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockIClient_QuarantineTests_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QuarantineTests'
type MockIClient_QuarantineTests_Call struct {
	*mock.Call
}

// QuarantineTests is a helper method to define mock.On call
//   - ctx context.Context
//   - l zerolog.Logger
//   - owner string
//   - repo string
//   - targets []golang.QuarantineTarget
//   - options ...github.QuarantineOption
func (_e *MockIClient_Expecter) QuarantineTests(ctx interface{}, l interface{}, owner interface{}, repo interface{}, targets interface{}, options ...interface{}) *MockIClient_QuarantineTests_Call {
	return &MockIClient_QuarantineTests_Call{Call: _e.mock.On("QuarantineTests",
		append([]interface{}{ctx, l, owner, repo, targets}, options...)...)}
}

func (_c *MockIClient_QuarantineTests_Call) Run(run func(ctx context.Context, l zerolog.Logger, owner string, repo string, targets []golang.QuarantineTarget, options ...github.QuarantineOption)) *MockIClient_QuarantineTests_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 zerolog.Logger
		if args[1] != nil {
			arg1 = args[1].(zerolog.Logger)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		var arg4 []golang.QuarantineTarget
		if args[4] != nil {
			arg4 = args[4].([]golang.QuarantineTarget)
		}
		var arg5 []github.QuarantineOption
		var variadicArgs []github.QuarantineOption
		if len(args) > 5 {
			variadicArgs = args[5].([]github.QuarantineOption)
		}
		arg5 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
			arg5...,
		)
	})
	return _c
}

func (_c *MockIClient_QuarantineTests_Call) Return(err error) *MockIClient_QuarantineTests_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockIClient_QuarantineTests_Call) RunAndReturn(run func(ctx context.Context, l zerolog.Logger, owner string, repo string, targets []golang.QuarantineTarget, options ...github.QuarantineOption) error) *MockIClient_QuarantineTests_Call {
	_c.Call.Return(run)
	return _c
}
