// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package trunk

import (
	"github.com/smartcontractkit/branch-out/jira"
	mock "github.com/stretchr/testify/mock"
)

// NewMockIClient creates a new instance of MockIClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIClient {
	mock := &MockIClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockIClient is an autogenerated mock type for the IClient type
type MockIClient struct {
	mock.Mock
}

type MockIClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIClient) EXPECT() *MockIClient_Expecter {
	return &MockIClient_Expecter{mock: &_m.Mock}
}

// LinkTicketToTestCase provides a mock function for the type MockIClient
func (_mock *MockIClient) LinkTicketToTestCase(testCaseID string, ticket *jira.TicketResponse, repoURL string) error {
	ret := _mock.Called(testCaseID, ticket, repoURL)

	if len(ret) == 0 {
		panic("no return value specified for LinkTicketToTestCase")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, *jira.TicketResponse, string) error); ok {
		r0 = returnFunc(testCaseID, ticket, repoURL)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockIClient_LinkTicketToTestCase_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LinkTicketToTestCase'
type MockIClient_LinkTicketToTestCase_Call struct {
	*mock.Call
}

// LinkTicketToTestCase is a helper method to define mock.On call
//   - testCaseID string
//   - ticket *jira.TicketResponse
//   - repoURL string
func (_e *MockIClient_Expecter) LinkTicketToTestCase(testCaseID interface{}, ticket interface{}, repoURL interface{}) *MockIClient_LinkTicketToTestCase_Call {
	return &MockIClient_LinkTicketToTestCase_Call{Call: _e.mock.On("LinkTicketToTestCase", testCaseID, ticket, repoURL)}
}

func (_c *MockIClient_LinkTicketToTestCase_Call) Run(run func(testCaseID string, ticket *jira.TicketResponse, repoURL string)) *MockIClient_LinkTicketToTestCase_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 *jira.TicketResponse
		if args[1] != nil {
			arg1 = args[1].(*jira.TicketResponse)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockIClient_LinkTicketToTestCase_Call) Return(err error) *MockIClient_LinkTicketToTestCase_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockIClient_LinkTicketToTestCase_Call) RunAndReturn(run func(testCaseID string, ticket *jira.TicketResponse, repoURL string) error) *MockIClient_LinkTicketToTestCase_Call {
	_c.Call.Return(run)
	return _c
}
