// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package trunk

import (
	"github.com/smartcontractkit/branch-out/trunk"
	mock "github.com/stretchr/testify/mock"
)

// NewMockWebhookEvent creates a new instance of MockWebhookEvent. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockWebhookEvent(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockWebhookEvent {
	mock := &MockWebhookEvent{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockWebhookEvent is an autogenerated mock type for the WebhookEvent type
type MockWebhookEvent struct {
	mock.Mock
}

type MockWebhookEvent_Expecter struct {
	mock *mock.Mock
}

func (_m *MockWebhookEvent) EXPECT() *MockWebhookEvent_Expecter {
	return &MockWebhookEvent_Expecter{mock: &_m.Mock}
}

// GetTestCase provides a mock function for the type MockWebhookEvent
func (_mock *MockWebhookEvent) GetTestCase() trunk.TestCase {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetTestCase")
	}

	var r0 trunk.TestCase
	if returnFunc, ok := ret.Get(0).(func() trunk.TestCase); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(trunk.TestCase)
	}
	return r0
}

// MockWebhookEvent_GetTestCase_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTestCase'
type MockWebhookEvent_GetTestCase_Call struct {
	*mock.Call
}

// GetTestCase is a helper method to define mock.On call
func (_e *MockWebhookEvent_Expecter) GetTestCase() *MockWebhookEvent_GetTestCase_Call {
	return &MockWebhookEvent_GetTestCase_Call{Call: _e.mock.On("GetTestCase")}
}

func (_c *MockWebhookEvent_GetTestCase_Call) Run(run func()) *MockWebhookEvent_GetTestCase_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockWebhookEvent_GetTestCase_Call) Return(testCase trunk.TestCase) *MockWebhookEvent_GetTestCase_Call {
	_c.Call.Return(testCase)
	return _c
}

func (_c *MockWebhookEvent_GetTestCase_Call) RunAndReturn(run func() trunk.TestCase) *MockWebhookEvent_GetTestCase_Call {
	_c.Call.Return(run)
	return _c
}

// GetType provides a mock function for the type MockWebhookEvent
func (_mock *MockWebhookEvent) GetType() trunk.WebhookType {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetType")
	}

	var r0 trunk.WebhookType
	if returnFunc, ok := ret.Get(0).(func() trunk.WebhookType); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(trunk.WebhookType)
	}
	return r0
}

// MockWebhookEvent_GetType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetType'
type MockWebhookEvent_GetType_Call struct {
	*mock.Call
}

// GetType is a helper method to define mock.On call
func (_e *MockWebhookEvent_Expecter) GetType() *MockWebhookEvent_GetType_Call {
	return &MockWebhookEvent_GetType_Call{Call: _e.mock.On("GetType")}
}

func (_c *MockWebhookEvent_GetType_Call) Run(run func()) *MockWebhookEvent_GetType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockWebhookEvent_GetType_Call) Return(webhookType trunk.WebhookType) *MockWebhookEvent_GetType_Call {
	_c.Call.Return(webhookType)
	return _c
}

func (_c *MockWebhookEvent_GetType_Call) RunAndReturn(run func() trunk.WebhookType) *MockWebhookEvent_GetType_Call {
	_c.Call.Return(run)
	return _c
}
