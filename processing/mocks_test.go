// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package processing

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/service/sqs"
	"github.com/rs/zerolog"
	"github.com/smartcontractkit/branch-out/github"
	"github.com/smartcontractkit/branch-out/golang"
	"github.com/smartcontractkit/branch-out/jira"
	"github.com/smartcontractkit/branch-out/trunk"
	mock "github.com/stretchr/testify/mock"
)

// NewMockAWSClient creates a new instance of MockAWSClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAWSClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAWSClient {
	mock := &MockAWSClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockAWSClient is an autogenerated mock type for the AWSClient type
type MockAWSClient struct {
	mock.Mock
}

type MockAWSClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAWSClient) EXPECT() *MockAWSClient_Expecter {
	return &MockAWSClient_Expecter{mock: &_m.Mock}
}

// DeleteMessageFromQueue provides a mock function for the type MockAWSClient
func (_mock *MockAWSClient) DeleteMessageFromQueue(ctx context.Context, l zerolog.Logger, receiptHandle string) error {
	ret := _mock.Called(ctx, l, receiptHandle)

	if len(ret) == 0 {
		panic("no return value specified for DeleteMessageFromQueue")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, zerolog.Logger, string) error); ok {
		r0 = returnFunc(ctx, l, receiptHandle)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockAWSClient_DeleteMessageFromQueue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteMessageFromQueue'
type MockAWSClient_DeleteMessageFromQueue_Call struct {
	*mock.Call
}

// DeleteMessageFromQueue is a helper method to define mock.On call
//   - ctx context.Context
//   - l zerolog.Logger
//   - receiptHandle string
func (_e *MockAWSClient_Expecter) DeleteMessageFromQueue(ctx interface{}, l interface{}, receiptHandle interface{}) *MockAWSClient_DeleteMessageFromQueue_Call {
	return &MockAWSClient_DeleteMessageFromQueue_Call{Call: _e.mock.On("DeleteMessageFromQueue", ctx, l, receiptHandle)}
}

func (_c *MockAWSClient_DeleteMessageFromQueue_Call) Run(run func(ctx context.Context, l zerolog.Logger, receiptHandle string)) *MockAWSClient_DeleteMessageFromQueue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 zerolog.Logger
		if args[1] != nil {
			arg1 = args[1].(zerolog.Logger)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockAWSClient_DeleteMessageFromQueue_Call) Return(err error) *MockAWSClient_DeleteMessageFromQueue_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockAWSClient_DeleteMessageFromQueue_Call) RunAndReturn(run func(ctx context.Context, l zerolog.Logger, receiptHandle string) error) *MockAWSClient_DeleteMessageFromQueue_Call {
	_c.Call.Return(run)
	return _c
}

// PushMessageToQueue provides a mock function for the type MockAWSClient
func (_mock *MockAWSClient) PushMessageToQueue(ctx context.Context, l zerolog.Logger, payload string) error {
	ret := _mock.Called(ctx, l, payload)

	if len(ret) == 0 {
		panic("no return value specified for PushMessageToQueue")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, zerolog.Logger, string) error); ok {
		r0 = returnFunc(ctx, l, payload)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockAWSClient_PushMessageToQueue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PushMessageToQueue'
type MockAWSClient_PushMessageToQueue_Call struct {
	*mock.Call
}

// PushMessageToQueue is a helper method to define mock.On call
//   - ctx context.Context
//   - l zerolog.Logger
//   - payload string
func (_e *MockAWSClient_Expecter) PushMessageToQueue(ctx interface{}, l interface{}, payload interface{}) *MockAWSClient_PushMessageToQueue_Call {
	return &MockAWSClient_PushMessageToQueue_Call{Call: _e.mock.On("PushMessageToQueue", ctx, l, payload)}
}

func (_c *MockAWSClient_PushMessageToQueue_Call) Run(run func(ctx context.Context, l zerolog.Logger, payload string)) *MockAWSClient_PushMessageToQueue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 zerolog.Logger
		if args[1] != nil {
			arg1 = args[1].(zerolog.Logger)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockAWSClient_PushMessageToQueue_Call) Return(err error) *MockAWSClient_PushMessageToQueue_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockAWSClient_PushMessageToQueue_Call) RunAndReturn(run func(ctx context.Context, l zerolog.Logger, payload string) error) *MockAWSClient_PushMessageToQueue_Call {
	_c.Call.Return(run)
	return _c
}

// ReceiveMessageFromQueue provides a mock function for the type MockAWSClient
func (_mock *MockAWSClient) ReceiveMessageFromQueue(ctx context.Context, l zerolog.Logger) (*sqs.ReceiveMessageOutput, error) {
	ret := _mock.Called(ctx, l)

	if len(ret) == 0 {
		panic("no return value specified for ReceiveMessageFromQueue")
	}

	var r0 *sqs.ReceiveMessageOutput
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, zerolog.Logger) (*sqs.ReceiveMessageOutput, error)); ok {
		return returnFunc(ctx, l)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, zerolog.Logger) *sqs.ReceiveMessageOutput); ok {
		r0 = returnFunc(ctx, l)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sqs.ReceiveMessageOutput)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, zerolog.Logger) error); ok {
		r1 = returnFunc(ctx, l)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAWSClient_ReceiveMessageFromQueue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReceiveMessageFromQueue'
type MockAWSClient_ReceiveMessageFromQueue_Call struct {
	*mock.Call
}

// ReceiveMessageFromQueue is a helper method to define mock.On call
//   - ctx context.Context
//   - l zerolog.Logger
func (_e *MockAWSClient_Expecter) ReceiveMessageFromQueue(ctx interface{}, l interface{}) *MockAWSClient_ReceiveMessageFromQueue_Call {
	return &MockAWSClient_ReceiveMessageFromQueue_Call{Call: _e.mock.On("ReceiveMessageFromQueue", ctx, l)}
}

func (_c *MockAWSClient_ReceiveMessageFromQueue_Call) Run(run func(ctx context.Context, l zerolog.Logger)) *MockAWSClient_ReceiveMessageFromQueue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 zerolog.Logger
		if args[1] != nil {
			arg1 = args[1].(zerolog.Logger)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockAWSClient_ReceiveMessageFromQueue_Call) Return(receiveMessageOutput *sqs.ReceiveMessageOutput, err error) *MockAWSClient_ReceiveMessageFromQueue_Call {
	_c.Call.Return(receiveMessageOutput, err)
	return _c
}

func (_c *MockAWSClient_ReceiveMessageFromQueue_Call) RunAndReturn(run func(ctx context.Context, l zerolog.Logger) (*sqs.ReceiveMessageOutput, error)) *MockAWSClient_ReceiveMessageFromQueue_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockJiraClient creates a new instance of MockJiraClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockJiraClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockJiraClient {
	mock := &MockJiraClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockJiraClient is an autogenerated mock type for the JiraClient type
type MockJiraClient struct {
	mock.Mock
}

type MockJiraClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockJiraClient) EXPECT() *MockJiraClient_Expecter {
	return &MockJiraClient_Expecter{mock: &_m.Mock}
}

// AddCommentToFlakyTestIssue provides a mock function for the type MockJiraClient
func (_mock *MockJiraClient) AddCommentToFlakyTestIssue(issue jira.FlakyTestIssue, statusChange trunk.TestCaseStatusChange) error {
	ret := _mock.Called(issue, statusChange)

	if len(ret) == 0 {
		panic("no return value specified for AddCommentToFlakyTestIssue")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(jira.FlakyTestIssue, trunk.TestCaseStatusChange) error); ok {
		r0 = returnFunc(issue, statusChange)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockJiraClient_AddCommentToFlakyTestIssue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddCommentToFlakyTestIssue'
type MockJiraClient_AddCommentToFlakyTestIssue_Call struct {
	*mock.Call
}

// AddCommentToFlakyTestIssue is a helper method to define mock.On call
//   - issue jira.FlakyTestIssue
//   - statusChange trunk.TestCaseStatusChange
func (_e *MockJiraClient_Expecter) AddCommentToFlakyTestIssue(issue interface{}, statusChange interface{}) *MockJiraClient_AddCommentToFlakyTestIssue_Call {
	return &MockJiraClient_AddCommentToFlakyTestIssue_Call{Call: _e.mock.On("AddCommentToFlakyTestIssue", issue, statusChange)}
}

func (_c *MockJiraClient_AddCommentToFlakyTestIssue_Call) Run(run func(issue jira.FlakyTestIssue, statusChange trunk.TestCaseStatusChange)) *MockJiraClient_AddCommentToFlakyTestIssue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 jira.FlakyTestIssue
		if args[0] != nil {
			arg0 = args[0].(jira.FlakyTestIssue)
		}
		var arg1 trunk.TestCaseStatusChange
		if args[1] != nil {
			arg1 = args[1].(trunk.TestCaseStatusChange)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockJiraClient_AddCommentToFlakyTestIssue_Call) Return(err error) *MockJiraClient_AddCommentToFlakyTestIssue_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockJiraClient_AddCommentToFlakyTestIssue_Call) RunAndReturn(run func(issue jira.FlakyTestIssue, statusChange trunk.TestCaseStatusChange) error) *MockJiraClient_AddCommentToFlakyTestIssue_Call {
	_c.Call.Return(run)
	return _c
}

// CloseIssue provides a mock function for the type MockJiraClient
func (_mock *MockJiraClient) CloseIssue(issueKey string, closeComment string) error {
	ret := _mock.Called(issueKey, closeComment)

	if len(ret) == 0 {
		panic("no return value specified for CloseIssue")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = returnFunc(issueKey, closeComment)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockJiraClient_CloseIssue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CloseIssue'
type MockJiraClient_CloseIssue_Call struct {
	*mock.Call
}

// CloseIssue is a helper method to define mock.On call
//   - issueKey string
//   - closeComment string
func (_e *MockJiraClient_Expecter) CloseIssue(issueKey interface{}, closeComment interface{}) *MockJiraClient_CloseIssue_Call {
	return &MockJiraClient_CloseIssue_Call{Call: _e.mock.On("CloseIssue", issueKey, closeComment)}
}

func (_c *MockJiraClient_CloseIssue_Call) Run(run func(issueKey string, closeComment string)) *MockJiraClient_CloseIssue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockJiraClient_CloseIssue_Call) Return(err error) *MockJiraClient_CloseIssue_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockJiraClient_CloseIssue_Call) RunAndReturn(run func(issueKey string, closeComment string) error) *MockJiraClient_CloseIssue_Call {
	_c.Call.Return(run)
	return _c
}

// CreateFlakyTestIssue provides a mock function for the type MockJiraClient
func (_mock *MockJiraClient) CreateFlakyTestIssue(req jira.FlakyTestIssueRequest) (jira.FlakyTestIssue, error) {
	ret := _mock.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for CreateFlakyTestIssue")
	}

	var r0 jira.FlakyTestIssue
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(jira.FlakyTestIssueRequest) (jira.FlakyTestIssue, error)); ok {
		return returnFunc(req)
	}
	if returnFunc, ok := ret.Get(0).(func(jira.FlakyTestIssueRequest) jira.FlakyTestIssue); ok {
		r0 = returnFunc(req)
	} else {
		r0 = ret.Get(0).(jira.FlakyTestIssue)
	}
	if returnFunc, ok := ret.Get(1).(func(jira.FlakyTestIssueRequest) error); ok {
		r1 = returnFunc(req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockJiraClient_CreateFlakyTestIssue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateFlakyTestIssue'
type MockJiraClient_CreateFlakyTestIssue_Call struct {
	*mock.Call
}

// CreateFlakyTestIssue is a helper method to define mock.On call
//   - req jira.FlakyTestIssueRequest
func (_e *MockJiraClient_Expecter) CreateFlakyTestIssue(req interface{}) *MockJiraClient_CreateFlakyTestIssue_Call {
	return &MockJiraClient_CreateFlakyTestIssue_Call{Call: _e.mock.On("CreateFlakyTestIssue", req)}
}

func (_c *MockJiraClient_CreateFlakyTestIssue_Call) Run(run func(req jira.FlakyTestIssueRequest)) *MockJiraClient_CreateFlakyTestIssue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 jira.FlakyTestIssueRequest
		if args[0] != nil {
			arg0 = args[0].(jira.FlakyTestIssueRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockJiraClient_CreateFlakyTestIssue_Call) Return(flakyTestIssue jira.FlakyTestIssue, err error) *MockJiraClient_CreateFlakyTestIssue_Call {
	_c.Call.Return(flakyTestIssue, err)
	return _c
}

func (_c *MockJiraClient_CreateFlakyTestIssue_Call) RunAndReturn(run func(req jira.FlakyTestIssueRequest) (jira.FlakyTestIssue, error)) *MockJiraClient_CreateFlakyTestIssue_Call {
	_c.Call.Return(run)
	return _c
}

// GetOpenFlakyTestIssue provides a mock function for the type MockJiraClient
func (_mock *MockJiraClient) GetOpenFlakyTestIssue(packageName string, testName string) (jira.FlakyTestIssue, error) {
	ret := _mock.Called(packageName, testName)

	if len(ret) == 0 {
		panic("no return value specified for GetOpenFlakyTestIssue")
	}

	var r0 jira.FlakyTestIssue
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string) (jira.FlakyTestIssue, error)); ok {
		return returnFunc(packageName, testName)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string) jira.FlakyTestIssue); ok {
		r0 = returnFunc(packageName, testName)
	} else {
		r0 = ret.Get(0).(jira.FlakyTestIssue)
	}
	if returnFunc, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = returnFunc(packageName, testName)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockJiraClient_GetOpenFlakyTestIssue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOpenFlakyTestIssue'
type MockJiraClient_GetOpenFlakyTestIssue_Call struct {
	*mock.Call
}

// GetOpenFlakyTestIssue is a helper method to define mock.On call
//   - packageName string
//   - testName string
func (_e *MockJiraClient_Expecter) GetOpenFlakyTestIssue(packageName interface{}, testName interface{}) *MockJiraClient_GetOpenFlakyTestIssue_Call {
	return &MockJiraClient_GetOpenFlakyTestIssue_Call{Call: _e.mock.On("GetOpenFlakyTestIssue", packageName, testName)}
}

func (_c *MockJiraClient_GetOpenFlakyTestIssue_Call) Run(run func(packageName string, testName string)) *MockJiraClient_GetOpenFlakyTestIssue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockJiraClient_GetOpenFlakyTestIssue_Call) Return(flakyTestIssue jira.FlakyTestIssue, err error) *MockJiraClient_GetOpenFlakyTestIssue_Call {
	_c.Call.Return(flakyTestIssue, err)
	return _c
}

func (_c *MockJiraClient_GetOpenFlakyTestIssue_Call) RunAndReturn(run func(packageName string, testName string) (jira.FlakyTestIssue, error)) *MockJiraClient_GetOpenFlakyTestIssue_Call {
	_c.Call.Return(run)
	return _c
}

// GetOpenFlakyTestIssues provides a mock function for the type MockJiraClient
func (_mock *MockJiraClient) GetOpenFlakyTestIssues() ([]jira.FlakyTestIssue, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetOpenFlakyTestIssues")
	}

	var r0 []jira.FlakyTestIssue
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() ([]jira.FlakyTestIssue, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() []jira.FlakyTestIssue); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]jira.FlakyTestIssue)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockJiraClient_GetOpenFlakyTestIssues_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOpenFlakyTestIssues'
type MockJiraClient_GetOpenFlakyTestIssues_Call struct {
	*mock.Call
}

// GetOpenFlakyTestIssues is a helper method to define mock.On call
func (_e *MockJiraClient_Expecter) GetOpenFlakyTestIssues() *MockJiraClient_GetOpenFlakyTestIssues_Call {
	return &MockJiraClient_GetOpenFlakyTestIssues_Call{Call: _e.mock.On("GetOpenFlakyTestIssues")}
}

func (_c *MockJiraClient_GetOpenFlakyTestIssues_Call) Run(run func()) *MockJiraClient_GetOpenFlakyTestIssues_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockJiraClient_GetOpenFlakyTestIssues_Call) Return(flakyTestIssues []jira.FlakyTestIssue, err error) *MockJiraClient_GetOpenFlakyTestIssues_Call {
	_c.Call.Return(flakyTestIssues, err)
	return _c
}

func (_c *MockJiraClient_GetOpenFlakyTestIssues_Call) RunAndReturn(run func() ([]jira.FlakyTestIssue, error)) *MockJiraClient_GetOpenFlakyTestIssues_Call {
	_c.Call.Return(run)
	return _c
}

// GetProjectKey provides a mock function for the type MockJiraClient
func (_mock *MockJiraClient) GetProjectKey() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetProjectKey")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockJiraClient_GetProjectKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProjectKey'
type MockJiraClient_GetProjectKey_Call struct {
	*mock.Call
}

// GetProjectKey is a helper method to define mock.On call
func (_e *MockJiraClient_Expecter) GetProjectKey() *MockJiraClient_GetProjectKey_Call {
	return &MockJiraClient_GetProjectKey_Call{Call: _e.mock.On("GetProjectKey")}
}

func (_c *MockJiraClient_GetProjectKey_Call) Run(run func()) *MockJiraClient_GetProjectKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockJiraClient_GetProjectKey_Call) Return(s string) *MockJiraClient_GetProjectKey_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockJiraClient_GetProjectKey_Call) RunAndReturn(run func() string) *MockJiraClient_GetProjectKey_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTrunkClient creates a new instance of MockTrunkClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTrunkClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTrunkClient {
	mock := &MockTrunkClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockTrunkClient is an autogenerated mock type for the TrunkClient type
type MockTrunkClient struct {
	mock.Mock
}

type MockTrunkClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTrunkClient) EXPECT() *MockTrunkClient_Expecter {
	return &MockTrunkClient_Expecter{mock: &_m.Mock}
}

// LinkTicketToTestCase provides a mock function for the type MockTrunkClient
func (_mock *MockTrunkClient) LinkTicketToTestCase(testCaseID string, issueKey string, repoURL string) error {
	ret := _mock.Called(testCaseID, issueKey, repoURL)

	if len(ret) == 0 {
		panic("no return value specified for LinkTicketToTestCase")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = returnFunc(testCaseID, issueKey, repoURL)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTrunkClient_LinkTicketToTestCase_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LinkTicketToTestCase'
type MockTrunkClient_LinkTicketToTestCase_Call struct {
	*mock.Call
}

// LinkTicketToTestCase is a helper method to define mock.On call
//   - testCaseID string
//   - issueKey string
//   - repoURL string
func (_e *MockTrunkClient_Expecter) LinkTicketToTestCase(testCaseID interface{}, issueKey interface{}, repoURL interface{}) *MockTrunkClient_LinkTicketToTestCase_Call {
	return &MockTrunkClient_LinkTicketToTestCase_Call{Call: _e.mock.On("LinkTicketToTestCase", testCaseID, issueKey, repoURL)}
}

func (_c *MockTrunkClient_LinkTicketToTestCase_Call) Run(run func(testCaseID string, issueKey string, repoURL string)) *MockTrunkClient_LinkTicketToTestCase_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockTrunkClient_LinkTicketToTestCase_Call) Return(err error) *MockTrunkClient_LinkTicketToTestCase_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTrunkClient_LinkTicketToTestCase_Call) RunAndReturn(run func(testCaseID string, issueKey string, repoURL string) error) *MockTrunkClient_LinkTicketToTestCase_Call {
	_c.Call.Return(run)
	return _c
}

// QuarantinedTests provides a mock function for the type MockTrunkClient
func (_mock *MockTrunkClient) QuarantinedTests(repoURL string, orgURLSlug string) ([]trunk.TestCase, error) {
	ret := _mock.Called(repoURL, orgURLSlug)

	if len(ret) == 0 {
		panic("no return value specified for QuarantinedTests")
	}

	var r0 []trunk.TestCase
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string) ([]trunk.TestCase, error)); ok {
		return returnFunc(repoURL, orgURLSlug)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string) []trunk.TestCase); ok {
		r0 = returnFunc(repoURL, orgURLSlug)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]trunk.TestCase)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = returnFunc(repoURL, orgURLSlug)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTrunkClient_QuarantinedTests_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QuarantinedTests'
type MockTrunkClient_QuarantinedTests_Call struct {
	*mock.Call
}

// QuarantinedTests is a helper method to define mock.On call
//   - repoURL string
//   - orgURLSlug string
func (_e *MockTrunkClient_Expecter) QuarantinedTests(repoURL interface{}, orgURLSlug interface{}) *MockTrunkClient_QuarantinedTests_Call {
	return &MockTrunkClient_QuarantinedTests_Call{Call: _e.mock.On("QuarantinedTests", repoURL, orgURLSlug)}
}

func (_c *MockTrunkClient_QuarantinedTests_Call) Run(run func(repoURL string, orgURLSlug string)) *MockTrunkClient_QuarantinedTests_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTrunkClient_QuarantinedTests_Call) Return(testCases []trunk.TestCase, err error) *MockTrunkClient_QuarantinedTests_Call {
	_c.Call.Return(testCases, err)
	return _c
}

func (_c *MockTrunkClient_QuarantinedTests_Call) RunAndReturn(run func(repoURL string, orgURLSlug string) ([]trunk.TestCase, error)) *MockTrunkClient_QuarantinedTests_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockGithubClient creates a new instance of MockGithubClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockGithubClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockGithubClient {
	mock := &MockGithubClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockGithubClient is an autogenerated mock type for the GithubClient type
type MockGithubClient struct {
	mock.Mock
}

type MockGithubClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockGithubClient) EXPECT() *MockGithubClient_Expecter {
	return &MockGithubClient_Expecter{mock: &_m.Mock}
}

// QuarantineTests provides a mock function for the type MockGithubClient
func (_mock *MockGithubClient) QuarantineTests(ctx context.Context, l zerolog.Logger, repoURL string, targets []golang.QuarantineTarget, options ...github.QuarantineOption) error {
	var tmpRet mock.Arguments
	if len(options) > 0 {
		tmpRet = _mock.Called(ctx, l, repoURL, targets, options)
	} else {
		tmpRet = _mock.Called(ctx, l, repoURL, targets)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for QuarantineTests")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, zerolog.Logger, string, []golang.QuarantineTarget, ...github.QuarantineOption) error); ok {
		r0 = returnFunc(ctx, l, repoURL, targets, options...)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockGithubClient_QuarantineTests_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QuarantineTests'
type MockGithubClient_QuarantineTests_Call struct {
	*mock.Call
}

// QuarantineTests is a helper method to define mock.On call
//   - ctx context.Context
//   - l zerolog.Logger
//   - repoURL string
//   - targets []golang.QuarantineTarget
//   - options ...github.QuarantineOption
func (_e *MockGithubClient_Expecter) QuarantineTests(ctx interface{}, l interface{}, repoURL interface{}, targets interface{}, options ...interface{}) *MockGithubClient_QuarantineTests_Call {
	return &MockGithubClient_QuarantineTests_Call{Call: _e.mock.On("QuarantineTests",
		append([]interface{}{ctx, l, repoURL, targets}, options...)...)}
}

func (_c *MockGithubClient_QuarantineTests_Call) Run(run func(ctx context.Context, l zerolog.Logger, repoURL string, targets []golang.QuarantineTarget, options ...github.QuarantineOption)) *MockGithubClient_QuarantineTests_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 zerolog.Logger
		if args[1] != nil {
			arg1 = args[1].(zerolog.Logger)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 []golang.QuarantineTarget
		if args[3] != nil {
			arg3 = args[3].([]golang.QuarantineTarget)
		}
		var arg4 []github.QuarantineOption
		var variadicArgs []github.QuarantineOption
		if len(args) > 4 {
			variadicArgs = args[4].([]github.QuarantineOption)
		}
		arg4 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4...,
		)
	})
	return _c
}

func (_c *MockGithubClient_QuarantineTests_Call) Return(err error) *MockGithubClient_QuarantineTests_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockGithubClient_QuarantineTests_Call) RunAndReturn(run func(ctx context.Context, l zerolog.Logger, repoURL string, targets []golang.QuarantineTarget, options ...github.QuarantineOption) error) *MockGithubClient_QuarantineTests_Call {
	_c.Call.Return(run)
	return _c
}
