// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package jira

import (
	"github.com/andygrunwald/go-jira"
	mock "github.com/stretchr/testify/mock"
)

// newMockIssueService creates a new instance of mockIssueService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockIssueService(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockIssueService {
	mock := &mockIssueService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// mockIssueService is an autogenerated mock type for the issueService type
type mockIssueService struct {
	mock.Mock
}

type mockIssueService_Expecter struct {
	mock *mock.Mock
}

func (_m *mockIssueService) EXPECT() *mockIssueService_Expecter {
	return &mockIssueService_Expecter{mock: &_m.Mock}
}

// AddComment provides a mock function for the type mockIssueService
func (_mock *mockIssueService) AddComment(issueID string, comment *jira.Comment) (*jira.Comment, *jira.Response, error) {
	ret := _mock.Called(issueID, comment)

	if len(ret) == 0 {
		panic("no return value specified for AddComment")
	}

	var r0 *jira.Comment
	var r1 *jira.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(string, *jira.Comment) (*jira.Comment, *jira.Response, error)); ok {
		return returnFunc(issueID, comment)
	}
	if returnFunc, ok := ret.Get(0).(func(string, *jira.Comment) *jira.Comment); ok {
		r0 = returnFunc(issueID, comment)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*jira.Comment)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, *jira.Comment) *jira.Response); ok {
		r1 = returnFunc(issueID, comment)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*jira.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(string, *jira.Comment) error); ok {
		r2 = returnFunc(issueID, comment)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// mockIssueService_AddComment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddComment'
type mockIssueService_AddComment_Call struct {
	*mock.Call
}

// AddComment is a helper method to define mock.On call
//   - issueID string
//   - comment *jira.Comment
func (_e *mockIssueService_Expecter) AddComment(issueID interface{}, comment interface{}) *mockIssueService_AddComment_Call {
	return &mockIssueService_AddComment_Call{Call: _e.mock.On("AddComment", issueID, comment)}
}

func (_c *mockIssueService_AddComment_Call) Run(run func(issueID string, comment *jira.Comment)) *mockIssueService_AddComment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 *jira.Comment
		if args[1] != nil {
			arg1 = args[1].(*jira.Comment)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *mockIssueService_AddComment_Call) Return(comment1 *jira.Comment, response *jira.Response, err error) *mockIssueService_AddComment_Call {
	_c.Call.Return(comment1, response, err)
	return _c
}

func (_c *mockIssueService_AddComment_Call) RunAndReturn(run func(issueID string, comment *jira.Comment) (*jira.Comment, *jira.Response, error)) *mockIssueService_AddComment_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function for the type mockIssueService
func (_mock *mockIssueService) Create(issue *jira.Issue) (*jira.Issue, *jira.Response, error) {
	ret := _mock.Called(issue)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *jira.Issue
	var r1 *jira.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(*jira.Issue) (*jira.Issue, *jira.Response, error)); ok {
		return returnFunc(issue)
	}
	if returnFunc, ok := ret.Get(0).(func(*jira.Issue) *jira.Issue); ok {
		r0 = returnFunc(issue)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*jira.Issue)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*jira.Issue) *jira.Response); ok {
		r1 = returnFunc(issue)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*jira.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(*jira.Issue) error); ok {
		r2 = returnFunc(issue)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// mockIssueService_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type mockIssueService_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - issue *jira.Issue
func (_e *mockIssueService_Expecter) Create(issue interface{}) *mockIssueService_Create_Call {
	return &mockIssueService_Create_Call{Call: _e.mock.On("Create", issue)}
}

func (_c *mockIssueService_Create_Call) Run(run func(issue *jira.Issue)) *mockIssueService_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *jira.Issue
		if args[0] != nil {
			arg0 = args[0].(*jira.Issue)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *mockIssueService_Create_Call) Return(issue1 *jira.Issue, response *jira.Response, err error) *mockIssueService_Create_Call {
	_c.Call.Return(issue1, response, err)
	return _c
}

func (_c *mockIssueService_Create_Call) RunAndReturn(run func(issue *jira.Issue) (*jira.Issue, *jira.Response, error)) *mockIssueService_Create_Call {
	_c.Call.Return(run)
	return _c
}

// DoTransition provides a mock function for the type mockIssueService
func (_mock *mockIssueService) DoTransition(issueID string, transitionID string) (*jira.Response, error) {
	ret := _mock.Called(issueID, transitionID)

	if len(ret) == 0 {
		panic("no return value specified for DoTransition")
	}

	var r0 *jira.Response
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string) (*jira.Response, error)); ok {
		return returnFunc(issueID, transitionID)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string) *jira.Response); ok {
		r0 = returnFunc(issueID, transitionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*jira.Response)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = returnFunc(issueID, transitionID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// mockIssueService_DoTransition_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DoTransition'
type mockIssueService_DoTransition_Call struct {
	*mock.Call
}

// DoTransition is a helper method to define mock.On call
//   - issueID string
//   - transitionID string
func (_e *mockIssueService_Expecter) DoTransition(issueID interface{}, transitionID interface{}) *mockIssueService_DoTransition_Call {
	return &mockIssueService_DoTransition_Call{Call: _e.mock.On("DoTransition", issueID, transitionID)}
}

func (_c *mockIssueService_DoTransition_Call) Run(run func(issueID string, transitionID string)) *mockIssueService_DoTransition_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *mockIssueService_DoTransition_Call) Return(response *jira.Response, err error) *mockIssueService_DoTransition_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *mockIssueService_DoTransition_Call) RunAndReturn(run func(issueID string, transitionID string) (*jira.Response, error)) *mockIssueService_DoTransition_Call {
	_c.Call.Return(run)
	return _c
}

// GetTransitions provides a mock function for the type mockIssueService
func (_mock *mockIssueService) GetTransitions(issueID string) ([]jira.Transition, *jira.Response, error) {
	ret := _mock.Called(issueID)

	if len(ret) == 0 {
		panic("no return value specified for GetTransitions")
	}

	var r0 []jira.Transition
	var r1 *jira.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(string) ([]jira.Transition, *jira.Response, error)); ok {
		return returnFunc(issueID)
	}
	if returnFunc, ok := ret.Get(0).(func(string) []jira.Transition); ok {
		r0 = returnFunc(issueID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]jira.Transition)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) *jira.Response); ok {
		r1 = returnFunc(issueID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*jira.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(string) error); ok {
		r2 = returnFunc(issueID)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// mockIssueService_GetTransitions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTransitions'
type mockIssueService_GetTransitions_Call struct {
	*mock.Call
}

// GetTransitions is a helper method to define mock.On call
//   - issueID string
func (_e *mockIssueService_Expecter) GetTransitions(issueID interface{}) *mockIssueService_GetTransitions_Call {
	return &mockIssueService_GetTransitions_Call{Call: _e.mock.On("GetTransitions", issueID)}
}

func (_c *mockIssueService_GetTransitions_Call) Run(run func(issueID string)) *mockIssueService_GetTransitions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *mockIssueService_GetTransitions_Call) Return(transitions []jira.Transition, response *jira.Response, err error) *mockIssueService_GetTransitions_Call {
	_c.Call.Return(transitions, response, err)
	return _c
}

func (_c *mockIssueService_GetTransitions_Call) RunAndReturn(run func(issueID string) ([]jira.Transition, *jira.Response, error)) *mockIssueService_GetTransitions_Call {
	_c.Call.Return(run)
	return _c
}

// Search provides a mock function for the type mockIssueService
func (_mock *mockIssueService) Search(jql string, options *jira.SearchOptions) ([]jira.Issue, *jira.Response, error) {
	ret := _mock.Called(jql, options)

	if len(ret) == 0 {
		panic("no return value specified for Search")
	}

	var r0 []jira.Issue
	var r1 *jira.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(string, *jira.SearchOptions) ([]jira.Issue, *jira.Response, error)); ok {
		return returnFunc(jql, options)
	}
	if returnFunc, ok := ret.Get(0).(func(string, *jira.SearchOptions) []jira.Issue); ok {
		r0 = returnFunc(jql, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]jira.Issue)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, *jira.SearchOptions) *jira.Response); ok {
		r1 = returnFunc(jql, options)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*jira.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(string, *jira.SearchOptions) error); ok {
		r2 = returnFunc(jql, options)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// mockIssueService_Search_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Search'
type mockIssueService_Search_Call struct {
	*mock.Call
}

// Search is a helper method to define mock.On call
//   - jql string
//   - options *jira.SearchOptions
func (_e *mockIssueService_Expecter) Search(jql interface{}, options interface{}) *mockIssueService_Search_Call {
	return &mockIssueService_Search_Call{Call: _e.mock.On("Search", jql, options)}
}

func (_c *mockIssueService_Search_Call) Run(run func(jql string, options *jira.SearchOptions)) *mockIssueService_Search_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 *jira.SearchOptions
		if args[1] != nil {
			arg1 = args[1].(*jira.SearchOptions)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *mockIssueService_Search_Call) Return(issues []jira.Issue, response *jira.Response, err error) *mockIssueService_Search_Call {
	_c.Call.Return(issues, response, err)
	return _c
}

func (_c *mockIssueService_Search_Call) RunAndReturn(run func(jql string, options *jira.SearchOptions) ([]jira.Issue, *jira.Response, error)) *mockIssueService_Search_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type mockIssueService
func (_mock *mockIssueService) Update(issue *jira.Issue) (*jira.Issue, *jira.Response, error) {
	ret := _mock.Called(issue)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *jira.Issue
	var r1 *jira.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(*jira.Issue) (*jira.Issue, *jira.Response, error)); ok {
		return returnFunc(issue)
	}
	if returnFunc, ok := ret.Get(0).(func(*jira.Issue) *jira.Issue); ok {
		r0 = returnFunc(issue)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*jira.Issue)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*jira.Issue) *jira.Response); ok {
		r1 = returnFunc(issue)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*jira.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(*jira.Issue) error); ok {
		r2 = returnFunc(issue)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// mockIssueService_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type mockIssueService_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - issue *jira.Issue
func (_e *mockIssueService_Expecter) Update(issue interface{}) *mockIssueService_Update_Call {
	return &mockIssueService_Update_Call{Call: _e.mock.On("Update", issue)}
}

func (_c *mockIssueService_Update_Call) Run(run func(issue *jira.Issue)) *mockIssueService_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *jira.Issue
		if args[0] != nil {
			arg0 = args[0].(*jira.Issue)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *mockIssueService_Update_Call) Return(issue1 *jira.Issue, response *jira.Response, err error) *mockIssueService_Update_Call {
	_c.Call.Return(issue1, response, err)
	return _c
}

func (_c *mockIssueService_Update_Call) RunAndReturn(run func(issue *jira.Issue) (*jira.Issue, *jira.Response, error)) *mockIssueService_Update_Call {
	_c.Call.Return(run)
	return _c
}

// newMockFieldService creates a new instance of mockFieldService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockFieldService(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockFieldService {
	mock := &mockFieldService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// mockFieldService is an autogenerated mock type for the fieldService type
type mockFieldService struct {
	mock.Mock
}

type mockFieldService_Expecter struct {
	mock *mock.Mock
}

func (_m *mockFieldService) EXPECT() *mockFieldService_Expecter {
	return &mockFieldService_Expecter{mock: &_m.Mock}
}

// GetList provides a mock function for the type mockFieldService
func (_mock *mockFieldService) GetList() ([]jira.Field, *jira.Response, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetList")
	}

	var r0 []jira.Field
	var r1 *jira.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func() ([]jira.Field, *jira.Response, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() []jira.Field); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]jira.Field)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() *jira.Response); ok {
		r1 = returnFunc()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*jira.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func() error); ok {
		r2 = returnFunc()
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// mockFieldService_GetList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetList'
type mockFieldService_GetList_Call struct {
	*mock.Call
}

// GetList is a helper method to define mock.On call
func (_e *mockFieldService_Expecter) GetList() *mockFieldService_GetList_Call {
	return &mockFieldService_GetList_Call{Call: _e.mock.On("GetList")}
}

func (_c *mockFieldService_GetList_Call) Run(run func()) *mockFieldService_GetList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockFieldService_GetList_Call) Return(fields []jira.Field, response *jira.Response, err error) *mockFieldService_GetList_Call {
	_c.Call.Return(fields, response, err)
	return _c
}

func (_c *mockFieldService_GetList_Call) RunAndReturn(run func() ([]jira.Field, *jira.Response, error)) *mockFieldService_GetList_Call {
	_c.Call.Return(run)
	return _c
}
