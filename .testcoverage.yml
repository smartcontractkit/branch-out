# (mandatory)
# Path to coverage profile file (output of `go test -coverprofile` command).
#
# For cases where there are many coverage profiles, such as when running
# unit tests and integration tests separately, you can combine all those
# profiles into one. In this case, the profile should have a comma-separated list
# of profile files, e.g., 'cover_unit.out,cover_integration.out'.
profile: coverage.out

# Holds coverage thresholds percentages, values should be in range [0-100].
threshold:
  # (optional; default 0)
  # Minimum coverage percentage required for each package.
  package: 70

  # (optional; default 0)
  # Minimum overall project coverage percentage required.
  total: 70

# Holds regexp rules which will exclude matched files or packages
# from coverage statistics.
exclude:
  paths:
    - ^internal/testhelpers$
    - _test\.go$

breakdown-file-name: "coverage.out"

diff:
  # Path to the test coverage breakdown file from the base branch.
  #
  # This file is usually generated and stored in the main (base) branch,
  # controled via `breakdown-file-name` property.
  # When set in a feature branch, it allows the tool to compute and report
  # the coverage difference between the current (feature) branch and the base.
  base-breakdown-file-name: "coverage.out"

  # Allowed threshold for the test coverage difference (in percentage)
  # between the feature branch and the base branch.
  #
  # By default, this is disabled (set to nil). Valid values range from
  # -100.0 to +100.0.
  #
  # Example:
  #   If set to 0.5, an error will be reported if the feature branch has
  #   less than 0.5% more coverage than the base.
  #
  #   If set to -0.5, the check allows up to 0.5% less coverage than the base.
  threshold: -0.5
