// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	jira "github.com/smartcontractkit/branch-out/jira"
	mock "github.com/stretchr/testify/mock"
)

// MockJiraClient is an autogenerated mock type for the IClient type
type MockJiraClient struct {
	mock.Mock
}

// AddCommentToTicket provides a mock function with given fields: ticketKey, comment
func (_m *MockJiraClient) AddCommentToTicket(ticketKey string, comment string) error {
	ret := _m.Called(ticketKey, comment)

	if len(ret) == 0 {
		panic("no return value specified for AddCommentToTicket")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(ticketKey, comment)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateFlakyTestTicket provides a mock function with given fields: req
func (_m *MockJiraClient) CreateFlakyTestTicket(req jira.FlakyTestTicketRequest) (*jira.TicketResponse, error) {
	ret := _m.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for CreateFlakyTestTicket")
	}

	var r0 *jira.TicketResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(jira.FlakyTestTicketRequest) (*jira.TicketResponse, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(jira.FlakyTestTicketRequest) *jira.TicketResponse); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*jira.TicketResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(jira.FlakyTestTicketRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTicketStatus provides a mock function with given fields: ticketKey
func (_m *MockJiraClient) GetTicketStatus(ticketKey string) (*jira.TicketStatus, error) {
	ret := _m.Called(ticketKey)

	if len(ret) == 0 {
		panic("no return value specified for GetTicketStatus")
	}

	var r0 *jira.TicketStatus
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*jira.TicketStatus, error)); ok {
		return rf(ticketKey)
	}
	if rf, ok := ret.Get(0).(func(string) *jira.TicketStatus); ok {
		r0 = rf(ticketKey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*jira.TicketStatus)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(ticketKey)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockJiraClient creates a new instance of MockJiraClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockJiraClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockJiraClient {
	mock := &MockJiraClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
