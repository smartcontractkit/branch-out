// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	github "github.com/smartcontractkit/branch-out/github"
	golang "github.com/smartcontractkit/branch-out/golang"

	mock "github.com/stretchr/testify/mock"

	zerolog "github.com/rs/zerolog"
)

// MockGitHubClient is an autogenerated mock type for the IClient type
type MockGitHubClient struct {
	mock.Mock
}

// QuarantineTests provides a mock function with given fields: ctx, l, owner, repo, targets, options
func (_m *MockGitHubClient) QuarantineTests(ctx context.Context, l zerolog.Logger, owner string, repo string, targets []golang.QuarantineTarget, options ...github.QuarantineOption) error {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, l, owner, repo, targets)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for QuarantineTests")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, zerolog.Logger, string, string, []golang.QuarantineTarget, ...github.QuarantineOption) error); ok {
		r0 = rf(ctx, l, owner, repo, targets, options...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockGitHubClient creates a new instance of MockGitHubClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockGitHubClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockGitHubClient {
	mock := &MockGitHubClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
